#!/usr/bin/env python3
# usage: llama3 input_file.csv column_name


import cgi
import cgitb
import datetime
import json
import os
import pandas as pd
import regex
import spacy
import subprocess
import sys

def print_label(entity_label):
    if entity_label in ["PER", "PERSON"]:
        print(f"{entity_label}", end="")
    elif entity_label in ["GPE", "LOC", "FAC"]:
        print(f"{entity_label}", end="")
    else:
        print(f"{entity_label}", end="")


def process_response_string(response_string):
    entity_label = ""
    for token in response_string.split():
        if token in ["LOC", "PER"]:
            if entity_label != "":
                print("; ", end="")
            entity_label = token
            print_label(entity_label)
            print(":", end="")
        elif entity_label != "" and not regex.search("^\d+$", token):
            print(" ", token, end=" ")
    print()

if True:
    file_path = sys.argv[1]
    data_df = pd.read_csv(file_path)
    prompt = "Can you find the person names and locations in this text and list them in combination with the character offset with respect to the beginning of the text? Please mention only the found strings in the format: type offset string, for example: PER 23 John and LOC 45 Paris. Here is the text:"
    counter = 0
    start_time = datetime.datetime.now()
    max_processed = 100
    column_name = sys.argv[2]
    for text in data_df[column_name]:
        if True:
            result = subprocess.run("curl http://localhost:11434/api/generate -d '{" + f"\"model\": \"llama3.3\", \"prompt\": \"{prompt} {text}\"" +  "}'", shell=True, capture_output=True, text=True)
            print("Entities: ", end="")

            response_string = ""
            for line in result.stdout.split("\n"):
                try:
                    my_object = json.loads(line)
                    if "response" in my_object:
                        response_string += my_object["response"] + " "
                except:
                    pass
            print("RESPONSE", response_string, "RESPONSE")
            process_response_string(response_string)
        counter += 1
        if counter >= max_processed:
            break
    end_time = datetime.datetime.now()
    time_taken = end_time - start_time
    print(f"Processing time: {round(time_taken.total_seconds(), 2)} seconds")
